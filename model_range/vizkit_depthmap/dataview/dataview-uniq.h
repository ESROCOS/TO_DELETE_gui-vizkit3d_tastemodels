#ifndef GENERATED_ASN1SCC_DATAVIEW_UNIQ_H
#define GENERATED_ASN1SCC_DATAVIEW_UNIQ_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef double asn1SccT_Double;

#define asn1SccT_Double_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccT_Double_REQUIRED_BITS_FOR_ENCODING        104
#define asn1SccT_Double_REQUIRED_BYTES_FOR_ACN_ENCODING   13 
#define asn1SccT_Double_REQUIRED_BITS_FOR_ACN_ENCODING    104
#define asn1SccT_Double_REQUIRED_BYTES_FOR_XER_ENCODING   71

void asn1SccT_Double_Initialize(asn1SccT_Double* pVal);
flag asn1SccT_Double_IsConstraintValid(const asn1SccT_Double* val, int* pErrCode);
#ifndef ERR_asn1SccT_Double 
#define ERR_asn1SccT_Double		1001  /*(-1.79769313486231570000E+308 .. 1.79769313486231570000E+308)*/
#endif

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[6];
} asn1SccVector6d;

#define asn1SccVector6d_REQUIRED_BYTES_FOR_ENCODING       79 
#define asn1SccVector6d_REQUIRED_BITS_FOR_ENCODING        627
#define asn1SccVector6d_REQUIRED_BYTES_FOR_ACN_ENCODING   79 
#define asn1SccVector6d_REQUIRED_BITS_FOR_ACN_ENCODING    627
#define asn1SccVector6d_REQUIRED_BYTES_FOR_XER_ENCODING   447

void asn1SccVector6d_Initialize(asn1SccVector6d* pVal);
flag asn1SccVector6d_IsConstraintValid(const asn1SccVector6d* val, int* pErrCode);
#ifndef ERR_asn1SccVector6d 
#define ERR_asn1SccVector6d		1002  /*(SIZE(1 .. 6))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[3];
} asn1SccVector3d;

#define asn1SccVector3d_REQUIRED_BYTES_FOR_ENCODING       40 
#define asn1SccVector3d_REQUIRED_BITS_FOR_ENCODING        314
#define asn1SccVector3d_REQUIRED_BYTES_FOR_ACN_ENCODING   40 
#define asn1SccVector3d_REQUIRED_BITS_FOR_ACN_ENCODING    314
#define asn1SccVector3d_REQUIRED_BYTES_FOR_XER_ENCODING   234

void asn1SccVector3d_Initialize(asn1SccVector3d* pVal);
flag asn1SccVector3d_IsConstraintValid(const asn1SccVector3d* val, int* pErrCode);
#ifndef ERR_asn1SccVector3d 
#define ERR_asn1SccVector3d		1003  /*(SIZE(1 .. 3))*/
#endif

typedef asn1SccVector3d asn1SccPosition;

#define asn1SccPosition_REQUIRED_BYTES_FOR_ENCODING       40 
#define asn1SccPosition_REQUIRED_BITS_FOR_ENCODING        314
#define asn1SccPosition_REQUIRED_BYTES_FOR_ACN_ENCODING   40 
#define asn1SccPosition_REQUIRED_BITS_FOR_ACN_ENCODING    314
#define asn1SccPosition_REQUIRED_BYTES_FOR_XER_ENCODING   234

void asn1SccPosition_Initialize(asn1SccPosition* pVal);
flag asn1SccPosition_IsConstraintValid(const asn1SccPosition* val, int* pErrCode);


typedef asn1SccVector3d asn1SccPoint;

#define asn1SccPoint_REQUIRED_BYTES_FOR_ENCODING       40 
#define asn1SccPoint_REQUIRED_BITS_FOR_ENCODING        314
#define asn1SccPoint_REQUIRED_BYTES_FOR_ACN_ENCODING   40 
#define asn1SccPoint_REQUIRED_BITS_FOR_ACN_ENCODING    314
#define asn1SccPoint_REQUIRED_BYTES_FOR_XER_ENCODING   228

void asn1SccPoint_Initialize(asn1SccPoint* pVal);
flag asn1SccPoint_IsConstraintValid(const asn1SccPoint* val, int* pErrCode);


typedef struct {    int nCount; 
    
    asn1SccPoint arr[60];
} asn1SccPointcloud_points;

#define asn1SccPointcloud_points_REQUIRED_BYTES_FOR_ENCODING       2356 
#define asn1SccPointcloud_points_REQUIRED_BITS_FOR_ENCODING        18846
#define asn1SccPointcloud_points_REQUIRED_BYTES_FOR_ACN_ENCODING   2356 
#define asn1SccPointcloud_points_REQUIRED_BITS_FOR_ACN_ENCODING    18846
#define asn1SccPointcloud_points_REQUIRED_BYTES_FOR_XER_ENCODING   13719

void asn1SccPointcloud_points_Initialize(asn1SccPointcloud_points* pVal);
flag asn1SccPointcloud_points_IsConstraintValid(const asn1SccPointcloud_points* val, int* pErrCode);
#ifndef ERR_asn1SccPointcloud_points 
#define ERR_asn1SccPointcloud_points		1004  /*(SIZE(1 .. maxPointcloudSize))*/
#endif

typedef struct {
    asn1SccVector3d position;
    asn1SccT_Double heading;
    asn1SccT_Double tol_position;
    asn1SccT_Double tol_heading;
} asn1SccWaypoint;

#define asn1SccWaypoint_REQUIRED_BYTES_FOR_ENCODING       79 
#define asn1SccWaypoint_REQUIRED_BITS_FOR_ENCODING        626
#define asn1SccWaypoint_REQUIRED_BYTES_FOR_ACN_ENCODING   79 
#define asn1SccWaypoint_REQUIRED_BITS_FOR_ACN_ENCODING    626
#define asn1SccWaypoint_REQUIRED_BYTES_FOR_XER_ENCODING   480

void asn1SccWaypoint_Initialize(asn1SccWaypoint* pVal);
flag asn1SccWaypoint_IsConstraintValid(const asn1SccWaypoint* val, int* pErrCode);


typedef struct {    int nCount; 
    
    asn1SccT_Double arr[4];
} asn1SccQuaterniond;

#define asn1SccQuaterniond_REQUIRED_BYTES_FOR_ENCODING       53 
#define asn1SccQuaterniond_REQUIRED_BITS_FOR_ENCODING        418
#define asn1SccQuaterniond_REQUIRED_BYTES_FOR_ACN_ENCODING   53 
#define asn1SccQuaterniond_REQUIRED_BITS_FOR_ACN_ENCODING    418
#define asn1SccQuaterniond_REQUIRED_BYTES_FOR_XER_ENCODING   311

void asn1SccQuaterniond_Initialize(asn1SccQuaterniond* pVal);
flag asn1SccQuaterniond_IsConstraintValid(const asn1SccQuaterniond* val, int* pErrCode);
#ifndef ERR_asn1SccQuaterniond 
#define ERR_asn1SccQuaterniond		1005  /*(SIZE(1 .. 4))*/
#endif

typedef asn1SccQuaterniond asn1SccOrientation;

#define asn1SccOrientation_REQUIRED_BYTES_FOR_ENCODING       53 
#define asn1SccOrientation_REQUIRED_BITS_FOR_ENCODING        418
#define asn1SccOrientation_REQUIRED_BYTES_FOR_ACN_ENCODING   53 
#define asn1SccOrientation_REQUIRED_BITS_FOR_ACN_ENCODING    418
#define asn1SccOrientation_REQUIRED_BYTES_FOR_XER_ENCODING   311

void asn1SccOrientation_Initialize(asn1SccOrientation* pVal);
flag asn1SccOrientation_IsConstraintValid(const asn1SccOrientation* val, int* pErrCode);


typedef struct {
    asn1SccPosition pos;
    asn1SccOrientation orient;
} asn1SccPose;

#define asn1SccPose_REQUIRED_BYTES_FOR_ENCODING       92 
#define asn1SccPose_REQUIRED_BITS_FOR_ENCODING        732
#define asn1SccPose_REQUIRED_BYTES_FOR_ACN_ENCODING   92 
#define asn1SccPose_REQUIRED_BITS_FOR_ACN_ENCODING    732
#define asn1SccPose_REQUIRED_BYTES_FOR_XER_ENCODING   538

void asn1SccPose_Initialize(asn1SccPose* pVal);
flag asn1SccPose_IsConstraintValid(const asn1SccPose* val, int* pErrCode);


typedef struct {    int nCount; 
    
    asn1SccT_Double arr[100];
} asn1SccVectorXd;

#define asn1SccVectorXd_REQUIRED_BYTES_FOR_ENCODING       1301 
#define asn1SccVectorXd_REQUIRED_BITS_FOR_ENCODING        10407
#define asn1SccVectorXd_REQUIRED_BYTES_FOR_ACN_ENCODING   1301 
#define asn1SccVectorXd_REQUIRED_BITS_FOR_ACN_ENCODING    10407
#define asn1SccVectorXd_REQUIRED_BYTES_FOR_XER_ENCODING   7121

void asn1SccVectorXd_Initialize(asn1SccVectorXd* pVal);
flag asn1SccVectorXd_IsConstraintValid(const asn1SccVectorXd* val, int* pErrCode);
#ifndef ERR_asn1SccVectorXd 
#define ERR_asn1SccVectorXd		1006  /*(SIZE(1 .. 100))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[3];
} asn1SccVector2d;

#define asn1SccVector2d_REQUIRED_BYTES_FOR_ENCODING       40 
#define asn1SccVector2d_REQUIRED_BITS_FOR_ENCODING        314
#define asn1SccVector2d_REQUIRED_BYTES_FOR_ACN_ENCODING   40 
#define asn1SccVector2d_REQUIRED_BITS_FOR_ACN_ENCODING    314
#define asn1SccVector2d_REQUIRED_BYTES_FOR_XER_ENCODING   234

void asn1SccVector2d_Initialize(asn1SccVector2d* pVal);
flag asn1SccVector2d_IsConstraintValid(const asn1SccVector2d* val, int* pErrCode);
#ifndef ERR_asn1SccVector2d 
#define ERR_asn1SccVector2d		1007  /*(SIZE(1 .. 3))*/
#endif

typedef asn1SccVector2d asn1SccPosition2D;

#define asn1SccPosition2D_REQUIRED_BYTES_FOR_ENCODING       40 
#define asn1SccPosition2D_REQUIRED_BITS_FOR_ENCODING        314
#define asn1SccPosition2D_REQUIRED_BYTES_FOR_ACN_ENCODING   40 
#define asn1SccPosition2D_REQUIRED_BITS_FOR_ACN_ENCODING    314
#define asn1SccPosition2D_REQUIRED_BYTES_FOR_XER_ENCODING   238

void asn1SccPosition2D_Initialize(asn1SccPosition2D* pVal);
flag asn1SccPosition2D_IsConstraintValid(const asn1SccPosition2D* val, int* pErrCode);


typedef struct {
    asn1SccPosition2D position;
    asn1SccT_Double orientation;
} asn1SccPose2D;

#define asn1SccPose2D_REQUIRED_BYTES_FOR_ENCODING       53 
#define asn1SccPose2D_REQUIRED_BITS_FOR_ENCODING        418
#define asn1SccPose2D_REQUIRED_BYTES_FOR_ACN_ENCODING   53 
#define asn1SccPose2D_REQUIRED_BITS_FOR_ACN_ENCODING    418
#define asn1SccPose2D_REQUIRED_BYTES_FOR_XER_ENCODING   328

void asn1SccPose2D_Initialize(asn1SccPose2D* pVal);
flag asn1SccPose2D_IsConstraintValid(const asn1SccPose2D* val, int* pErrCode);


typedef struct {    int nCount; 
    
    asn1SccT_Double arr[4];
} asn1SccVector4d;

#define asn1SccVector4d_REQUIRED_BYTES_FOR_ENCODING       53 
#define asn1SccVector4d_REQUIRED_BITS_FOR_ENCODING        418
#define asn1SccVector4d_REQUIRED_BYTES_FOR_ACN_ENCODING   53 
#define asn1SccVector4d_REQUIRED_BITS_FOR_ACN_ENCODING    418
#define asn1SccVector4d_REQUIRED_BYTES_FOR_XER_ENCODING   305

void asn1SccVector4d_Initialize(asn1SccVector4d* pVal);
flag asn1SccVector4d_IsConstraintValid(const asn1SccVector4d* val, int* pErrCode);
#ifndef ERR_asn1SccVector4d 
#define ERR_asn1SccVector4d		1008  /*(SIZE(1 .. 4))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccVector4d arr[60];
} asn1SccPointcloud_colors;

#define asn1SccPointcloud_colors_REQUIRED_BYTES_FOR_ENCODING       3136 
#define asn1SccPointcloud_colors_REQUIRED_BITS_FOR_ENCODING        25086
#define asn1SccPointcloud_colors_REQUIRED_BYTES_FOR_ACN_ENCODING   3136 
#define asn1SccPointcloud_colors_REQUIRED_BITS_FOR_ACN_ENCODING    25086
#define asn1SccPointcloud_colors_REQUIRED_BYTES_FOR_XER_ENCODING   18339

void asn1SccPointcloud_colors_Initialize(asn1SccPointcloud_colors* pVal);
flag asn1SccPointcloud_colors_IsConstraintValid(const asn1SccPointcloud_colors* val, int* pErrCode);
#ifndef ERR_asn1SccPointcloud_colors 
#define ERR_asn1SccPointcloud_colors		1009  /*(SIZE(1 .. maxPointcloudSize))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[4];
} asn1SccAngleAxisd;

#define asn1SccAngleAxisd_REQUIRED_BYTES_FOR_ENCODING       53 
#define asn1SccAngleAxisd_REQUIRED_BITS_FOR_ENCODING        418
#define asn1SccAngleAxisd_REQUIRED_BYTES_FOR_ACN_ENCODING   53 
#define asn1SccAngleAxisd_REQUIRED_BITS_FOR_ACN_ENCODING    418
#define asn1SccAngleAxisd_REQUIRED_BYTES_FOR_XER_ENCODING   309

void asn1SccAngleAxisd_Initialize(asn1SccAngleAxisd* pVal);
flag asn1SccAngleAxisd_IsConstraintValid(const asn1SccAngleAxisd* val, int* pErrCode);
#ifndef ERR_asn1SccAngleAxisd 
#define ERR_asn1SccAngleAxisd		1010  /*(SIZE(1 .. 4))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[4];
} asn1SccTransform3d_elm;

#define asn1SccTransform3d_elm_REQUIRED_BYTES_FOR_ENCODING       53 
#define asn1SccTransform3d_elm_REQUIRED_BITS_FOR_ENCODING        418
#define asn1SccTransform3d_elm_REQUIRED_BYTES_FOR_ACN_ENCODING   53 
#define asn1SccTransform3d_elm_REQUIRED_BITS_FOR_ACN_ENCODING    418
#define asn1SccTransform3d_elm_REQUIRED_BYTES_FOR_XER_ENCODING   319

void asn1SccTransform3d_elm_Initialize(asn1SccTransform3d_elm* pVal);
flag asn1SccTransform3d_elm_IsConstraintValid(const asn1SccTransform3d_elm* val, int* pErrCode);
#ifndef ERR_asn1SccTransform3d_elm 
#define ERR_asn1SccTransform3d_elm		1011  /*(SIZE(1 .. 4))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccTransform3d_elm arr[4];
} asn1SccTransform3d;

#define asn1SccTransform3d_REQUIRED_BYTES_FOR_ENCODING       210 
#define asn1SccTransform3d_REQUIRED_BITS_FOR_ENCODING        1674
#define asn1SccTransform3d_REQUIRED_BYTES_FOR_ACN_ENCODING   210 
#define asn1SccTransform3d_REQUIRED_BITS_FOR_ACN_ENCODING    1674
#define asn1SccTransform3d_REQUIRED_BYTES_FOR_XER_ENCODING   1271

void asn1SccTransform3d_Initialize(asn1SccTransform3d* pVal);
flag asn1SccTransform3d_IsConstraintValid(const asn1SccTransform3d* val, int* pErrCode);
#ifndef ERR_asn1SccTransform3d 
#define ERR_asn1SccTransform3d		1012  /*(SIZE(1 .. 4))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[4];
} asn1SccMatrix4d_elm;

#define asn1SccMatrix4d_elm_REQUIRED_BYTES_FOR_ENCODING       53 
#define asn1SccMatrix4d_elm_REQUIRED_BITS_FOR_ENCODING        418
#define asn1SccMatrix4d_elm_REQUIRED_BYTES_FOR_ACN_ENCODING   53 
#define asn1SccMatrix4d_elm_REQUIRED_BITS_FOR_ACN_ENCODING    418
#define asn1SccMatrix4d_elm_REQUIRED_BYTES_FOR_XER_ENCODING   313

void asn1SccMatrix4d_elm_Initialize(asn1SccMatrix4d_elm* pVal);
flag asn1SccMatrix4d_elm_IsConstraintValid(const asn1SccMatrix4d_elm* val, int* pErrCode);
#ifndef ERR_asn1SccMatrix4d_elm 
#define ERR_asn1SccMatrix4d_elm		1013  /*(SIZE(1 .. 4))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccMatrix4d_elm arr[4];
} asn1SccMatrix4d;

#define asn1SccMatrix4d_REQUIRED_BYTES_FOR_ENCODING       210 
#define asn1SccMatrix4d_REQUIRED_BITS_FOR_ENCODING        1674
#define asn1SccMatrix4d_REQUIRED_BYTES_FOR_ACN_ENCODING   210 
#define asn1SccMatrix4d_REQUIRED_BITS_FOR_ACN_ENCODING    1674
#define asn1SccMatrix4d_REQUIRED_BYTES_FOR_XER_ENCODING   1265

void asn1SccMatrix4d_Initialize(asn1SccMatrix4d* pVal);
flag asn1SccMatrix4d_IsConstraintValid(const asn1SccMatrix4d* val, int* pErrCode);
#ifndef ERR_asn1SccMatrix4d 
#define ERR_asn1SccMatrix4d		1014  /*(SIZE(1 .. 4))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[2];
} asn1SccMatrix2d_elm;

#define asn1SccMatrix2d_elm_REQUIRED_BYTES_FOR_ENCODING       27 
#define asn1SccMatrix2d_elm_REQUIRED_BITS_FOR_ENCODING        209
#define asn1SccMatrix2d_elm_REQUIRED_BYTES_FOR_ACN_ENCODING   27 
#define asn1SccMatrix2d_elm_REQUIRED_BITS_FOR_ACN_ENCODING    209
#define asn1SccMatrix2d_elm_REQUIRED_BYTES_FOR_XER_ENCODING   171

void asn1SccMatrix2d_elm_Initialize(asn1SccMatrix2d_elm* pVal);
flag asn1SccMatrix2d_elm_IsConstraintValid(const asn1SccMatrix2d_elm* val, int* pErrCode);
#ifndef ERR_asn1SccMatrix2d_elm 
#define ERR_asn1SccMatrix2d_elm		1015  /*(SIZE(1 .. 2))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccMatrix2d_elm arr[2];
} asn1SccMatrix2d;

#define asn1SccMatrix2d_REQUIRED_BYTES_FOR_ENCODING       53 
#define asn1SccMatrix2d_REQUIRED_BITS_FOR_ENCODING        419
#define asn1SccMatrix2d_REQUIRED_BYTES_FOR_ACN_ENCODING   53 
#define asn1SccMatrix2d_REQUIRED_BITS_FOR_ACN_ENCODING    419
#define asn1SccMatrix2d_REQUIRED_BYTES_FOR_XER_ENCODING   359

void asn1SccMatrix2d_Initialize(asn1SccMatrix2d* pVal);
flag asn1SccMatrix2d_IsConstraintValid(const asn1SccMatrix2d* val, int* pErrCode);
#ifndef ERR_asn1SccMatrix2d 
#define ERR_asn1SccMatrix2d		1016  /*(SIZE(1 .. 2))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[4];
} asn1SccIsometry3d_elm;

#define asn1SccIsometry3d_elm_REQUIRED_BYTES_FOR_ENCODING       53 
#define asn1SccIsometry3d_elm_REQUIRED_BITS_FOR_ENCODING        418
#define asn1SccIsometry3d_elm_REQUIRED_BYTES_FOR_ACN_ENCODING   53 
#define asn1SccIsometry3d_elm_REQUIRED_BITS_FOR_ACN_ENCODING    418
#define asn1SccIsometry3d_elm_REQUIRED_BYTES_FOR_XER_ENCODING   317

void asn1SccIsometry3d_elm_Initialize(asn1SccIsometry3d_elm* pVal);
flag asn1SccIsometry3d_elm_IsConstraintValid(const asn1SccIsometry3d_elm* val, int* pErrCode);
#ifndef ERR_asn1SccIsometry3d_elm 
#define ERR_asn1SccIsometry3d_elm		1017  /*(SIZE(1 .. 4))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccIsometry3d_elm arr[4];
} asn1SccIsometry3d;

#define asn1SccIsometry3d_REQUIRED_BYTES_FOR_ENCODING       210 
#define asn1SccIsometry3d_REQUIRED_BITS_FOR_ENCODING        1674
#define asn1SccIsometry3d_REQUIRED_BYTES_FOR_ACN_ENCODING   210 
#define asn1SccIsometry3d_REQUIRED_BITS_FOR_ACN_ENCODING    1674
#define asn1SccIsometry3d_REQUIRED_BYTES_FOR_XER_ENCODING   1269

void asn1SccIsometry3d_Initialize(asn1SccIsometry3d* pVal);
flag asn1SccIsometry3d_IsConstraintValid(const asn1SccIsometry3d* val, int* pErrCode);
#ifndef ERR_asn1SccIsometry3d 
#define ERR_asn1SccIsometry3d		1018  /*(SIZE(1 .. 4))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[20];
} asn1SccMatrixXd_elm;

#define asn1SccMatrixXd_elm_REQUIRED_BYTES_FOR_ENCODING       261 
#define asn1SccMatrixXd_elm_REQUIRED_BITS_FOR_ENCODING        2085
#define asn1SccMatrixXd_elm_REQUIRED_BYTES_FOR_ACN_ENCODING   261 
#define asn1SccMatrixXd_elm_REQUIRED_BITS_FOR_ACN_ENCODING    2085
#define asn1SccMatrixXd_elm_REQUIRED_BYTES_FOR_XER_ENCODING   1449

void asn1SccMatrixXd_elm_Initialize(asn1SccMatrixXd_elm* pVal);
flag asn1SccMatrixXd_elm_IsConstraintValid(const asn1SccMatrixXd_elm* val, int* pErrCode);
#ifndef ERR_asn1SccMatrixXd_elm 
#define ERR_asn1SccMatrixXd_elm		1019  /*(SIZE(1 .. 20))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccMatrixXd_elm arr[20];
} asn1SccMatrixXd;

#define asn1SccMatrixXd_REQUIRED_BYTES_FOR_ENCODING       5214 
#define asn1SccMatrixXd_REQUIRED_BITS_FOR_ENCODING        41705
#define asn1SccMatrixXd_REQUIRED_BYTES_FOR_ACN_ENCODING   5214 
#define asn1SccMatrixXd_REQUIRED_BITS_FOR_ACN_ENCODING    41705
#define asn1SccMatrixXd_REQUIRED_BYTES_FOR_XER_ENCODING   28961

void asn1SccMatrixXd_Initialize(asn1SccMatrixXd* pVal);
flag asn1SccMatrixXd_IsConstraintValid(const asn1SccMatrixXd* val, int* pErrCode);
#ifndef ERR_asn1SccMatrixXd 
#define ERR_asn1SccMatrixXd		1020  /*(SIZE(1 .. 20))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[3];
} asn1SccMatrix3d_elm;

#define asn1SccMatrix3d_elm_REQUIRED_BYTES_FOR_ENCODING       40 
#define asn1SccMatrix3d_elm_REQUIRED_BITS_FOR_ENCODING        314
#define asn1SccMatrix3d_elm_REQUIRED_BYTES_FOR_ACN_ENCODING   40 
#define asn1SccMatrix3d_elm_REQUIRED_BITS_FOR_ACN_ENCODING    314
#define asn1SccMatrix3d_elm_REQUIRED_BYTES_FOR_XER_ENCODING   242

void asn1SccMatrix3d_elm_Initialize(asn1SccMatrix3d_elm* pVal);
flag asn1SccMatrix3d_elm_IsConstraintValid(const asn1SccMatrix3d_elm* val, int* pErrCode);
#ifndef ERR_asn1SccMatrix3d_elm 
#define ERR_asn1SccMatrix3d_elm		1021  /*(SIZE(1 .. 3))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccMatrix3d_elm arr[3];
} asn1SccMatrix3d;

#define asn1SccMatrix3d_REQUIRED_BYTES_FOR_ENCODING       118 
#define asn1SccMatrix3d_REQUIRED_BITS_FOR_ENCODING        944
#define asn1SccMatrix3d_REQUIRED_BYTES_FOR_ACN_ENCODING   118 
#define asn1SccMatrix3d_REQUIRED_BITS_FOR_ACN_ENCODING    944
#define asn1SccMatrix3d_REQUIRED_BYTES_FOR_XER_ENCODING   741

void asn1SccMatrix3d_Initialize(asn1SccMatrix3d* pVal);
flag asn1SccMatrix3d_IsConstraintValid(const asn1SccMatrix3d* val, int* pErrCode);
#ifndef ERR_asn1SccMatrix3d 
#define ERR_asn1SccMatrix3d		1022  /*(SIZE(1 .. 3))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[6];
} asn1SccMatrix6d_elm;

#define asn1SccMatrix6d_elm_REQUIRED_BYTES_FOR_ENCODING       79 
#define asn1SccMatrix6d_elm_REQUIRED_BITS_FOR_ENCODING        627
#define asn1SccMatrix6d_elm_REQUIRED_BYTES_FOR_ACN_ENCODING   79 
#define asn1SccMatrix6d_elm_REQUIRED_BITS_FOR_ACN_ENCODING    627
#define asn1SccMatrix6d_elm_REQUIRED_BYTES_FOR_XER_ENCODING   455

void asn1SccMatrix6d_elm_Initialize(asn1SccMatrix6d_elm* pVal);
flag asn1SccMatrix6d_elm_IsConstraintValid(const asn1SccMatrix6d_elm* val, int* pErrCode);
#ifndef ERR_asn1SccMatrix6d_elm 
#define ERR_asn1SccMatrix6d_elm		1023  /*(SIZE(1 .. 6))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccMatrix6d_elm arr[6];
} asn1SccMatrix6d;

#define asn1SccMatrix6d_REQUIRED_BYTES_FOR_ENCODING       471 
#define asn1SccMatrix6d_REQUIRED_BITS_FOR_ENCODING        3765
#define asn1SccMatrix6d_REQUIRED_BYTES_FOR_ACN_ENCODING   471 
#define asn1SccMatrix6d_REQUIRED_BITS_FOR_ACN_ENCODING    3765
#define asn1SccMatrix6d_REQUIRED_BYTES_FOR_XER_ENCODING   2739

void asn1SccMatrix6d_Initialize(asn1SccMatrix6d* pVal);
flag asn1SccMatrix6d_IsConstraintValid(const asn1SccMatrix6d* val, int* pErrCode);
#ifndef ERR_asn1SccMatrix6d 
#define ERR_asn1SccMatrix6d		1024  /*(SIZE(1 .. 6))*/
#endif

typedef asn1SccMatrix6d asn1SccCovariance;

#define asn1SccCovariance_REQUIRED_BYTES_FOR_ENCODING       471 
#define asn1SccCovariance_REQUIRED_BITS_FOR_ENCODING        3765
#define asn1SccCovariance_REQUIRED_BYTES_FOR_ACN_ENCODING   471 
#define asn1SccCovariance_REQUIRED_BITS_FOR_ACN_ENCODING    3765
#define asn1SccCovariance_REQUIRED_BYTES_FOR_XER_ENCODING   2743

void asn1SccCovariance_Initialize(asn1SccCovariance* pVal);
flag asn1SccCovariance_IsConstraintValid(const asn1SccCovariance* val, int* pErrCode);


typedef struct {
    asn1SccPosition translation;
    asn1SccQuaterniond orientation;
    asn1SccCovariance cov;
} asn1SccTransformWithCovariance;

#define asn1SccTransformWithCovariance_REQUIRED_BYTES_FOR_ENCODING       563 
#define asn1SccTransformWithCovariance_REQUIRED_BITS_FOR_ENCODING        4497
#define asn1SccTransformWithCovariance_REQUIRED_BYTES_FOR_ACN_ENCODING   563 
#define asn1SccTransformWithCovariance_REQUIRED_BITS_FOR_ACN_ENCODING    4497
#define asn1SccTransformWithCovariance_REQUIRED_BYTES_FOR_XER_ENCODING   3331

void asn1SccTransformWithCovariance_Initialize(asn1SccTransformWithCovariance* pVal);
flag asn1SccTransformWithCovariance_IsConstraintValid(const asn1SccTransformWithCovariance* val, int* pErrCode);


typedef struct {
    asn1SccVector3d vel;
    asn1SccVector3d rot;
    asn1SccCovariance cov;
} asn1SccTwistWithCovariance;

#define asn1SccTwistWithCovariance_REQUIRED_BYTES_FOR_ENCODING       550 
#define asn1SccTwistWithCovariance_REQUIRED_BITS_FOR_ENCODING        4393
#define asn1SccTwistWithCovariance_REQUIRED_BYTES_FOR_ACN_ENCODING   550 
#define asn1SccTwistWithCovariance_REQUIRED_BITS_FOR_ACN_ENCODING    4393
#define asn1SccTwistWithCovariance_REQUIRED_BYTES_FOR_XER_ENCODING   3220

void asn1SccTwistWithCovariance_Initialize(asn1SccTwistWithCovariance* pVal);
flag asn1SccTwistWithCovariance_IsConstraintValid(const asn1SccTwistWithCovariance* val, int* pErrCode);


typedef struct {    int nCount; 
    
    asn1SccT_Double arr[4];
} asn1SccAffine3d_elm;

#define asn1SccAffine3d_elm_REQUIRED_BYTES_FOR_ENCODING       53 
#define asn1SccAffine3d_elm_REQUIRED_BITS_FOR_ENCODING        418
#define asn1SccAffine3d_elm_REQUIRED_BYTES_FOR_ACN_ENCODING   53 
#define asn1SccAffine3d_elm_REQUIRED_BITS_FOR_ACN_ENCODING    418
#define asn1SccAffine3d_elm_REQUIRED_BYTES_FOR_XER_ENCODING   313

void asn1SccAffine3d_elm_Initialize(asn1SccAffine3d_elm* pVal);
flag asn1SccAffine3d_elm_IsConstraintValid(const asn1SccAffine3d_elm* val, int* pErrCode);
#ifndef ERR_asn1SccAffine3d_elm 
#define ERR_asn1SccAffine3d_elm		1025  /*(SIZE(1 .. 4))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccAffine3d_elm arr[4];
} asn1SccAffine3d;

#define asn1SccAffine3d_REQUIRED_BYTES_FOR_ENCODING       210 
#define asn1SccAffine3d_REQUIRED_BITS_FOR_ENCODING        1674
#define asn1SccAffine3d_REQUIRED_BYTES_FOR_ACN_ENCODING   210 
#define asn1SccAffine3d_REQUIRED_BITS_FOR_ACN_ENCODING    1674
#define asn1SccAffine3d_REQUIRED_BYTES_FOR_XER_ENCODING   1265

void asn1SccAffine3d_Initialize(asn1SccAffine3d* pVal);
flag asn1SccAffine3d_IsConstraintValid(const asn1SccAffine3d* val, int* pErrCode);
#ifndef ERR_asn1SccAffine3d 
#define ERR_asn1SccAffine3d		1026  /*(SIZE(1 .. 4))*/
#endif

typedef struct {
    asn1SccT_Double distance;
    asn1SccT_Double angle;
} asn1SccPoseUpdateThreshold;

#define asn1SccPoseUpdateThreshold_REQUIRED_BYTES_FOR_ENCODING       26 
#define asn1SccPoseUpdateThreshold_REQUIRED_BITS_FOR_ENCODING        208
#define asn1SccPoseUpdateThreshold_REQUIRED_BYTES_FOR_ACN_ENCODING   26 
#define asn1SccPoseUpdateThreshold_REQUIRED_BITS_FOR_ACN_ENCODING    208
#define asn1SccPoseUpdateThreshold_REQUIRED_BYTES_FOR_XER_ENCODING   179

void asn1SccPoseUpdateThreshold_Initialize(asn1SccPoseUpdateThreshold* pVal);
flag asn1SccPoseUpdateThreshold_IsConstraintValid(const asn1SccPoseUpdateThreshold* val, int* pErrCode);


typedef struct {
    asn1SccT_Double rad;
} asn1SccAngle;

#define asn1SccAngle_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccAngle_REQUIRED_BITS_FOR_ENCODING        104
#define asn1SccAngle_REQUIRED_BYTES_FOR_ACN_ENCODING   13 
#define asn1SccAngle_REQUIRED_BITS_FOR_ACN_ENCODING    104
#define asn1SccAngle_REQUIRED_BYTES_FOR_XER_ENCODING   76

void asn1SccAngle_Initialize(asn1SccAngle* pVal);
flag asn1SccAngle_IsConstraintValid(const asn1SccAngle* val, int* pErrCode);


typedef struct {
    asn1SccT_Double width;
    asn1SccT_Double startRad;
    asn1SccT_Double endRad;
} asn1SccAngleSegment;

#define asn1SccAngleSegment_REQUIRED_BYTES_FOR_ENCODING       39 
#define asn1SccAngleSegment_REQUIRED_BITS_FOR_ENCODING        312
#define asn1SccAngleSegment_REQUIRED_BYTES_FOR_ACN_ENCODING   39 
#define asn1SccAngleSegment_REQUIRED_BITS_FOR_ACN_ENCODING    312
#define asn1SccAngleSegment_REQUIRED_BYTES_FOR_XER_ENCODING   232

void asn1SccAngleSegment_Initialize(asn1SccAngleSegment* pVal);
flag asn1SccAngleSegment_IsConstraintValid(const asn1SccAngleSegment* val, int* pErrCode);


typedef struct {
    asn1SccT_Double translation;
    asn1SccT_Double rotation;
} asn1SccMotion2D;

#define asn1SccMotion2D_REQUIRED_BYTES_FOR_ENCODING       26 
#define asn1SccMotion2D_REQUIRED_BITS_FOR_ENCODING        208
#define asn1SccMotion2D_REQUIRED_BYTES_FOR_ACN_ENCODING   26 
#define asn1SccMotion2D_REQUIRED_BITS_FOR_ACN_ENCODING    208
#define asn1SccMotion2D_REQUIRED_BYTES_FOR_XER_ENCODING   169

void asn1SccMotion2D_Initialize(asn1SccMotion2D* pVal);
flag asn1SccMotion2D_IsConstraintValid(const asn1SccMotion2D* val, int* pErrCode);


typedef struct {    int nCount; 
    
    asn1SccT_Double arr[60];
} asn1SccDepthMap_horizontal_interval;

#define asn1SccDepthMap_horizontal_interval_REQUIRED_BYTES_FOR_ENCODING       781 
#define asn1SccDepthMap_horizontal_interval_REQUIRED_BITS_FOR_ENCODING        6246
#define asn1SccDepthMap_horizontal_interval_REQUIRED_BYTES_FOR_ACN_ENCODING   781 
#define asn1SccDepthMap_horizontal_interval_REQUIRED_BITS_FOR_ACN_ENCODING    6246
#define asn1SccDepthMap_horizontal_interval_REQUIRED_BYTES_FOR_XER_ENCODING   4321

void asn1SccDepthMap_horizontal_interval_Initialize(asn1SccDepthMap_horizontal_interval* pVal);
flag asn1SccDepthMap_horizontal_interval_IsConstraintValid(const asn1SccDepthMap_horizontal_interval* val, int* pErrCode);
#ifndef ERR_asn1SccDepthMap_horizontal_interval 
#define ERR_asn1SccDepthMap_horizontal_interval		1027  /*(SIZE(1 .. maxDepthMapSize))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[60];
} asn1SccDepthMap_vertical_interval;

#define asn1SccDepthMap_vertical_interval_REQUIRED_BYTES_FOR_ENCODING       781 
#define asn1SccDepthMap_vertical_interval_REQUIRED_BITS_FOR_ENCODING        6246
#define asn1SccDepthMap_vertical_interval_REQUIRED_BYTES_FOR_ACN_ENCODING   781 
#define asn1SccDepthMap_vertical_interval_REQUIRED_BITS_FOR_ACN_ENCODING    6246
#define asn1SccDepthMap_vertical_interval_REQUIRED_BYTES_FOR_XER_ENCODING   4317

void asn1SccDepthMap_vertical_interval_Initialize(asn1SccDepthMap_vertical_interval* pVal);
flag asn1SccDepthMap_vertical_interval_IsConstraintValid(const asn1SccDepthMap_vertical_interval* val, int* pErrCode);
#ifndef ERR_asn1SccDepthMap_vertical_interval 
#define ERR_asn1SccDepthMap_vertical_interval		1028  /*(SIZE(1 .. maxDepthMapSize))*/
#endif

typedef double asn1SccT_Float;

#define asn1SccT_Float_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccT_Float_REQUIRED_BITS_FOR_ENCODING        104
#define asn1SccT_Float_REQUIRED_BYTES_FOR_ACN_ENCODING   13 
#define asn1SccT_Float_REQUIRED_BITS_FOR_ACN_ENCODING    104
#define asn1SccT_Float_REQUIRED_BYTES_FOR_XER_ENCODING   69

void asn1SccT_Float_Initialize(asn1SccT_Float* pVal);
flag asn1SccT_Float_IsConstraintValid(const asn1SccT_Float* val, int* pErrCode);
#ifndef ERR_asn1SccT_Float 
#define ERR_asn1SccT_Float		1029  /*(-3.40282346600000020000E+038 .. 3.40282346600000020000E+038)*/
#endif

typedef struct {    int nCount; 
    
    asn1SccT_Float arr[60];
} asn1SccLaserScan_remission;

#define asn1SccLaserScan_remission_REQUIRED_BYTES_FOR_ENCODING       781 
#define asn1SccLaserScan_remission_REQUIRED_BITS_FOR_ENCODING        6246
#define asn1SccLaserScan_remission_REQUIRED_BYTES_FOR_ACN_ENCODING   781 
#define asn1SccLaserScan_remission_REQUIRED_BITS_FOR_ACN_ENCODING    6246
#define asn1SccLaserScan_remission_REQUIRED_BYTES_FOR_XER_ENCODING   4183

void asn1SccLaserScan_remission_Initialize(asn1SccLaserScan_remission* pVal);
flag asn1SccLaserScan_remission_IsConstraintValid(const asn1SccLaserScan_remission* val, int* pErrCode);
#ifndef ERR_asn1SccLaserScan_remission 
#define ERR_asn1SccLaserScan_remission		1030  /*(SIZE(1 .. maxLaserScanSize))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccT_Float arr[60];
} asn1SccDepthMap_remissions;

#define asn1SccDepthMap_remissions_REQUIRED_BYTES_FOR_ENCODING       781 
#define asn1SccDepthMap_remissions_REQUIRED_BITS_FOR_ENCODING        6246
#define asn1SccDepthMap_remissions_REQUIRED_BYTES_FOR_ACN_ENCODING   781 
#define asn1SccDepthMap_remissions_REQUIRED_BITS_FOR_ACN_ENCODING    6246
#define asn1SccDepthMap_remissions_REQUIRED_BYTES_FOR_XER_ENCODING   4183

void asn1SccDepthMap_remissions_Initialize(asn1SccDepthMap_remissions* pVal);
flag asn1SccDepthMap_remissions_IsConstraintValid(const asn1SccDepthMap_remissions* val, int* pErrCode);
#ifndef ERR_asn1SccDepthMap_remissions 
#define ERR_asn1SccDepthMap_remissions		1031  /*(SIZE(1 .. maxDepthMapSize))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccT_Float arr[60];
} asn1SccDepthMap_distances;

#define asn1SccDepthMap_distances_REQUIRED_BYTES_FOR_ENCODING       781 
#define asn1SccDepthMap_distances_REQUIRED_BITS_FOR_ENCODING        6246
#define asn1SccDepthMap_distances_REQUIRED_BYTES_FOR_ACN_ENCODING   781 
#define asn1SccDepthMap_distances_REQUIRED_BITS_FOR_ACN_ENCODING    6246
#define asn1SccDepthMap_distances_REQUIRED_BYTES_FOR_XER_ENCODING   4181

void asn1SccDepthMap_distances_Initialize(asn1SccDepthMap_distances* pVal);
flag asn1SccDepthMap_distances_IsConstraintValid(const asn1SccDepthMap_distances* val, int* pErrCode);
#ifndef ERR_asn1SccDepthMap_distances 
#define ERR_asn1SccDepthMap_distances		1032  /*(SIZE(1 .. maxDepthMapSize))*/
#endif

typedef struct {
    asn1SccT_Double position;
    asn1SccT_Float speed;
    asn1SccT_Float effort;
    asn1SccT_Float raw;
    asn1SccT_Float acceleration;
} asn1SccJointState;

#define asn1SccJointState_REQUIRED_BYTES_FOR_ENCODING       65 
#define asn1SccJointState_REQUIRED_BITS_FOR_ENCODING        520
#define asn1SccJointState_REQUIRED_BYTES_FOR_ACN_ENCODING   65 
#define asn1SccJointState_REQUIRED_BITS_FOR_ACN_ENCODING    520
#define asn1SccJointState_REQUIRED_BYTES_FOR_XER_ENCODING   368

void asn1SccJointState_Initialize(asn1SccJointState* pVal);
flag asn1SccJointState_IsConstraintValid(const asn1SccJointState* val, int* pErrCode);


typedef struct {    int nCount; 
    
    asn1SccJointState arr[30];
} asn1SccJoints_elements;

#define asn1SccJoints_elements_REQUIRED_BYTES_FOR_ENCODING       1951 
#define asn1SccJoints_elements_REQUIRED_BITS_FOR_ENCODING        15605
#define asn1SccJoints_elements_REQUIRED_BYTES_FOR_ACN_ENCODING   1951 
#define asn1SccJoints_elements_REQUIRED_BITS_FOR_ACN_ENCODING    15605
#define asn1SccJoints_elements_REQUIRED_BYTES_FOR_XER_ENCODING   11075

void asn1SccJoints_elements_Initialize(asn1SccJoints_elements* pVal);
flag asn1SccJoints_elements_IsConstraintValid(const asn1SccJoints_elements* val, int* pErrCode);
#ifndef ERR_asn1SccJoints_elements 
#define ERR_asn1SccJoints_elements		1033  /*(SIZE(0 .. jointsElementsMax))*/
#endif

typedef asn1SccSint asn1SccT_Int16;

#define asn1SccT_Int16_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccT_Int16_REQUIRED_BITS_FOR_ENCODING        16
#define asn1SccT_Int16_REQUIRED_BYTES_FOR_ACN_ENCODING   2 
#define asn1SccT_Int16_REQUIRED_BITS_FOR_ACN_ENCODING    16
#define asn1SccT_Int16_REQUIRED_BYTES_FOR_XER_ENCODING   39

void asn1SccT_Int16_Initialize(asn1SccT_Int16* pVal);
flag asn1SccT_Int16_IsConstraintValid(const asn1SccT_Int16* val, int* pErrCode);
#ifndef ERR_asn1SccT_Int16 
#define ERR_asn1SccT_Int16		1034  /*(-32768 .. 32767)*/
#endif

typedef asn1SccUint asn1SccT_UInt16;

#define asn1SccT_UInt16_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccT_UInt16_REQUIRED_BITS_FOR_ENCODING        16
#define asn1SccT_UInt16_REQUIRED_BYTES_FOR_ACN_ENCODING   2 
#define asn1SccT_UInt16_REQUIRED_BITS_FOR_ACN_ENCODING    16
#define asn1SccT_UInt16_REQUIRED_BYTES_FOR_XER_ENCODING   41

void asn1SccT_UInt16_Initialize(asn1SccT_UInt16* pVal);
flag asn1SccT_UInt16_IsConstraintValid(const asn1SccT_UInt16* val, int* pErrCode);
#ifndef ERR_asn1SccT_UInt16 
#define ERR_asn1SccT_UInt16		1035  /*(0 .. 65535)*/
#endif

typedef asn1SccUint asn1SccT_UInt64;

#define asn1SccT_UInt64_REQUIRED_BYTES_FOR_ENCODING       8 
#define asn1SccT_UInt64_REQUIRED_BITS_FOR_ENCODING        63
#define asn1SccT_UInt64_REQUIRED_BYTES_FOR_ACN_ENCODING   8 
#define asn1SccT_UInt64_REQUIRED_BITS_FOR_ACN_ENCODING    63
#define asn1SccT_UInt64_REQUIRED_BYTES_FOR_XER_ENCODING   41

void asn1SccT_UInt64_Initialize(asn1SccT_UInt64* pVal);
flag asn1SccT_UInt64_IsConstraintValid(const asn1SccT_UInt64* val, int* pErrCode);
#ifndef ERR_asn1SccT_UInt64 
#define ERR_asn1SccT_UInt64		1036  /*(0 .. 9223372036854775807)*/
#endif

typedef asn1SccSint asn1SccT_Int64;

#define asn1SccT_Int64_REQUIRED_BYTES_FOR_ENCODING       8 
#define asn1SccT_Int64_REQUIRED_BITS_FOR_ENCODING        64
#define asn1SccT_Int64_REQUIRED_BYTES_FOR_ACN_ENCODING   8 
#define asn1SccT_Int64_REQUIRED_BITS_FOR_ACN_ENCODING    64
#define asn1SccT_Int64_REQUIRED_BYTES_FOR_XER_ENCODING   39

void asn1SccT_Int64_Initialize(asn1SccT_Int64* pVal);
flag asn1SccT_Int64_IsConstraintValid(const asn1SccT_Int64* val, int* pErrCode);
#ifndef ERR_asn1SccT_Int64 
#define ERR_asn1SccT_Int64		1037  /*(-9223372036854775807 .. 9223372036854775807)*/
#endif

typedef struct {    int nCount; 
    
    byte arr[256];
} asn1SccT_String;

#define asn1SccT_String_REQUIRED_BYTES_FOR_ENCODING       258 
#define asn1SccT_String_REQUIRED_BITS_FOR_ENCODING        2057
#define asn1SccT_String_REQUIRED_BYTES_FOR_ACN_ENCODING   258 
#define asn1SccT_String_REQUIRED_BITS_FOR_ACN_ENCODING    2057
#define asn1SccT_String_REQUIRED_BYTES_FOR_XER_ENCODING   533

void asn1SccT_String_Initialize(asn1SccT_String* pVal);
flag asn1SccT_String_IsConstraintValid(const asn1SccT_String* val, int* pErrCode);
#ifndef ERR_asn1SccT_String 
#define ERR_asn1SccT_String		1038  /*(SIZE(0 .. maxSize-T-String))*/
#endif

typedef enum {
    asn1SccLASER_RANGE_ERRORS_too_far = 0,
    asn1SccLASER_RANGE_ERRORS_too_near = 1,
    asn1SccLASER_RANGE_ERRORS_measurement_error = 2,
    asn1Sccother_range_errors = 3,
    asn1Sccmax_range_error = 4,
    asn1Sccend_laser_range_errors = 5
} asn1SccLASER_RANGE_ERRORS;

#define asn1SccLASER_RANGE_ERRORS_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccLASER_RANGE_ERRORS_REQUIRED_BITS_FOR_ENCODING        3
#define asn1SccLASER_RANGE_ERRORS_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccLASER_RANGE_ERRORS_REQUIRED_BITS_FOR_ACN_ENCODING    3
#define asn1SccLASER_RANGE_ERRORS_REQUIRED_BYTES_FOR_XER_ENCODING   60

void asn1SccLASER_RANGE_ERRORS_Initialize(asn1SccLASER_RANGE_ERRORS* pVal);
flag asn1SccLASER_RANGE_ERRORS_IsConstraintValid(const asn1SccLASER_RANGE_ERRORS* val, int* pErrCode);
#ifndef ERR_asn1SccLASER_RANGE_ERRORS_unknown_enumeration_value 
#define ERR_asn1SccLASER_RANGE_ERRORS_unknown_enumeration_value		1040  /**/
#endif
#ifndef ERR_asn1SccLASER_RANGE_ERRORS 
#define ERR_asn1SccLASER_RANGE_ERRORS		1039  /**/
#endif

typedef char asn1SccVizkitFilePath[256];

#define asn1SccVizkitFilePath_REQUIRED_BYTES_FOR_ENCODING       225 
#define asn1SccVizkitFilePath_REQUIRED_BITS_FOR_ENCODING        1793
#define asn1SccVizkitFilePath_REQUIRED_BYTES_FOR_ACN_ENCODING   225 
#define asn1SccVizkitFilePath_REQUIRED_BITS_FOR_ACN_ENCODING    1793
#define asn1SccVizkitFilePath_REQUIRED_BYTES_FOR_XER_ENCODING   288

void asn1SccVizkitFilePath_Initialize(asn1SccVizkitFilePath pVal);
flag asn1SccVizkitFilePath_IsConstraintValid(const asn1SccVizkitFilePath val, int* pErrCode);
#ifndef ERR_asn1SccVizkitFilePath 
#define ERR_asn1SccVizkitFilePath		1041  /*(SIZE(0 .. vizkit3dPathMaxSize))*/
#endif

typedef char asn1SccVizkitPluginLabel[32];

#define asn1SccVizkitPluginLabel_REQUIRED_BYTES_FOR_ENCODING       28 
#define asn1SccVizkitPluginLabel_REQUIRED_BITS_FOR_ENCODING        222
#define asn1SccVizkitPluginLabel_REQUIRED_BYTES_FOR_ACN_ENCODING   28 
#define asn1SccVizkitPluginLabel_REQUIRED_BITS_FOR_ACN_ENCODING    222
#define asn1SccVizkitPluginLabel_REQUIRED_BYTES_FOR_XER_ENCODING   70

void asn1SccVizkitPluginLabel_Initialize(asn1SccVizkitPluginLabel pVal);
flag asn1SccVizkitPluginLabel_IsConstraintValid(const asn1SccVizkitPluginLabel val, int* pErrCode);
#ifndef ERR_asn1SccVizkitPluginLabel 
#define ERR_asn1SccVizkitPluginLabel		1042  /*(SIZE(1 .. vizkit3dLabelMaxSize))*/
#endif

typedef asn1SccSint asn1SccT_Int32;

#define asn1SccT_Int32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_Int32_REQUIRED_BITS_FOR_ENCODING        32
#define asn1SccT_Int32_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define asn1SccT_Int32_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define asn1SccT_Int32_REQUIRED_BYTES_FOR_XER_ENCODING   39

void asn1SccT_Int32_Initialize(asn1SccT_Int32* pVal);
flag asn1SccT_Int32_IsConstraintValid(const asn1SccT_Int32* val, int* pErrCode);
#ifndef ERR_asn1SccT_Int32 
#define ERR_asn1SccT_Int32		1043  /*(-2147483648 .. 2147483647)*/
#endif

typedef struct {    int nCount; 
    
    asn1SccT_Int32 arr[60];
} asn1SccLaserScan_ranges;

#define asn1SccLaserScan_ranges_REQUIRED_BYTES_FOR_ENCODING       241 
#define asn1SccLaserScan_ranges_REQUIRED_BITS_FOR_ENCODING        1926
#define asn1SccLaserScan_ranges_REQUIRED_BYTES_FOR_ACN_ENCODING   241 
#define asn1SccLaserScan_ranges_REQUIRED_BITS_FOR_ACN_ENCODING    1926
#define asn1SccLaserScan_ranges_REQUIRED_BYTES_FOR_XER_ENCODING   2377

void asn1SccLaserScan_ranges_Initialize(asn1SccLaserScan_ranges* pVal);
flag asn1SccLaserScan_ranges_IsConstraintValid(const asn1SccLaserScan_ranges* val, int* pErrCode);
#ifndef ERR_asn1SccLaserScan_ranges 
#define ERR_asn1SccLaserScan_ranges		1044  /*(SIZE(1 .. maxLaserScanSize))*/
#endif

typedef struct {
    asn1SccT_Int64 microseconds;
    asn1SccT_Int32 usecPerSec;
} asn1SccTime;

#define asn1SccTime_REQUIRED_BYTES_FOR_ENCODING       12 
#define asn1SccTime_REQUIRED_BITS_FOR_ENCODING        96
#define asn1SccTime_REQUIRED_BYTES_FOR_ACN_ENCODING   12 
#define asn1SccTime_REQUIRED_BITS_FOR_ACN_ENCODING    96
#define asn1SccTime_REQUIRED_BYTES_FOR_XER_ENCODING   107

void asn1SccTime_Initialize(asn1SccTime* pVal);
flag asn1SccTime_IsConstraintValid(const asn1SccTime* val, int* pErrCode);


typedef struct {
    asn1SccTime ref_time;
    asn1SccPointcloud_points points;
    asn1SccPointcloud_colors colors;
} asn1SccPointcloud;

#define asn1SccPointcloud_REQUIRED_BYTES_FOR_ENCODING       5504 
#define asn1SccPointcloud_REQUIRED_BITS_FOR_ENCODING        44028
#define asn1SccPointcloud_REQUIRED_BYTES_FOR_ACN_ENCODING   5504 
#define asn1SccPointcloud_REQUIRED_BITS_FOR_ACN_ENCODING    44028
#define asn1SccPointcloud_REQUIRED_BYTES_FOR_XER_ENCODING   32154

void asn1SccPointcloud_Initialize(asn1SccPointcloud* pVal);
flag asn1SccPointcloud_IsConstraintValid(const asn1SccPointcloud* val, int* pErrCode);


typedef struct {    int nCount; 
    
    asn1SccTime arr[60];
} asn1SccDepthMap_timestamps;

#define asn1SccDepthMap_timestamps_REQUIRED_BYTES_FOR_ENCODING       721 
#define asn1SccDepthMap_timestamps_REQUIRED_BITS_FOR_ENCODING        5766
#define asn1SccDepthMap_timestamps_REQUIRED_BYTES_FOR_ACN_ENCODING   721 
#define asn1SccDepthMap_timestamps_REQUIRED_BITS_FOR_ACN_ENCODING    5766
#define asn1SccDepthMap_timestamps_REQUIRED_BYTES_FOR_XER_ENCODING   6463

void asn1SccDepthMap_timestamps_Initialize(asn1SccDepthMap_timestamps* pVal);
flag asn1SccDepthMap_timestamps_IsConstraintValid(const asn1SccDepthMap_timestamps* val, int* pErrCode);
#ifndef ERR_asn1SccDepthMap_timestamps 
#define ERR_asn1SccDepthMap_timestamps		1045  /*(SIZE(1 .. maxDepthMapSize))*/
#endif

typedef struct {
    asn1SccTime ref_time;
    asn1SccTransformWithCovariance pose;
    asn1SccTwistWithCovariance velocity;
} asn1SccBodyState;

#define asn1SccBodyState_REQUIRED_BYTES_FOR_ENCODING       1124 
#define asn1SccBodyState_REQUIRED_BITS_FOR_ENCODING        8986
#define asn1SccBodyState_REQUIRED_BYTES_FOR_ACN_ENCODING   1124 
#define asn1SccBodyState_REQUIRED_BITS_FOR_ACN_ENCODING    8986
#define asn1SccBodyState_REQUIRED_BYTES_FOR_XER_ENCODING   6629

void asn1SccBodyState_Initialize(asn1SccBodyState* pVal);
flag asn1SccBodyState_IsConstraintValid(const asn1SccBodyState* val, int* pErrCode);


typedef struct {
    asn1SccTime timestamp;
    asn1SccT_String sourceFrame;
    asn1SccT_String targetFrame;
    asn1SccPosition pos;
    asn1SccMatrix3d cov_position;
    asn1SccOrientation orient;
    asn1SccMatrix3d cov_orientation;
    asn1SccVector3d velocity;
    asn1SccMatrix3d cov_velocity;
    asn1SccVector3d angular_velocity;
    asn1SccMatrix3d cov_angular_velocity;
} asn1SccRigidBodyState;

#define asn1SccRigidBodyState_REQUIRED_BYTES_FOR_ENCODING       1169 
#define asn1SccRigidBodyState_REQUIRED_BITS_FOR_ENCODING        9346
#define asn1SccRigidBodyState_REQUIRED_BYTES_FOR_ACN_ENCODING   1169 
#define asn1SccRigidBodyState_REQUIRED_BITS_FOR_ACN_ENCODING    9346
#define asn1SccRigidBodyState_REQUIRED_BYTES_FOR_XER_ENCODING   5255

void asn1SccRigidBodyState_Initialize(asn1SccRigidBodyState* pVal);
flag asn1SccRigidBodyState_IsConstraintValid(const asn1SccRigidBodyState* val, int* pErrCode);


typedef asn1SccUint asn1SccT_UInt32;

#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_UInt32_REQUIRED_BITS_FOR_ENCODING        32
#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define asn1SccT_UInt32_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_XER_ENCODING   41

void asn1SccT_UInt32_Initialize(asn1SccT_UInt32* pVal);
flag asn1SccT_UInt32_IsConstraintValid(const asn1SccT_UInt32* val, int* pErrCode);
#ifndef ERR_asn1SccT_UInt32 
#define ERR_asn1SccT_UInt32		1046  /*(0 .. 4294967295)*/
#endif

typedef struct {
    asn1SccTime ref_time;
    asn1SccT_Double start_angle;
    asn1SccT_Double angular_resolution;
    asn1SccT_Double speed;
    asn1SccLaserScan_ranges ranges;
    asn1SccT_UInt32 minRange;
    asn1SccT_UInt32 maxRange;
    asn1SccLaserScan_remission remission;
} asn1SccLaserScan;

#define asn1SccLaserScan_REQUIRED_BYTES_FOR_ENCODING       1081 
#define asn1SccLaserScan_REQUIRED_BITS_FOR_ENCODING        8644
#define asn1SccLaserScan_REQUIRED_BYTES_FOR_ACN_ENCODING   1081 
#define asn1SccLaserScan_REQUIRED_BITS_FOR_ACN_ENCODING    8644
#define asn1SccLaserScan_REQUIRED_BYTES_FOR_XER_ENCODING   6973

void asn1SccLaserScan_Initialize(asn1SccLaserScan* pVal);
flag asn1SccLaserScan_IsConstraintValid(const asn1SccLaserScan* val, int* pErrCode);


typedef asn1SccSint asn1SccT_Int8;

#define asn1SccT_Int8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_Int8_REQUIRED_BITS_FOR_ENCODING        8
#define asn1SccT_Int8_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccT_Int8_REQUIRED_BITS_FOR_ACN_ENCODING    8
#define asn1SccT_Int8_REQUIRED_BYTES_FOR_XER_ENCODING   37

void asn1SccT_Int8_Initialize(asn1SccT_Int8* pVal);
flag asn1SccT_Int8_IsConstraintValid(const asn1SccT_Int8* val, int* pErrCode);
#ifndef ERR_asn1SccT_Int8 
#define ERR_asn1SccT_Int8		1047  /*(-128 .. 127)*/
#endif

typedef asn1SccUint asn1SccT_UInt8;

#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_UInt8_REQUIRED_BITS_FOR_ENCODING        8
#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccT_UInt8_REQUIRED_BITS_FOR_ACN_ENCODING    8
#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_XER_ENCODING   39

void asn1SccT_UInt8_Initialize(asn1SccT_UInt8* pVal);
flag asn1SccT_UInt8_IsConstraintValid(const asn1SccT_UInt8* val, int* pErrCode);
#ifndef ERR_asn1SccT_UInt8 
#define ERR_asn1SccT_UInt8		1048  /*(0 .. 255)*/
#endif

typedef struct {    int nCount; 
    
    asn1SccT_UInt8 arr[60];
} asn1SccSonarBeam_beam;

#define asn1SccSonarBeam_beam_REQUIRED_BYTES_FOR_ENCODING       61 
#define asn1SccSonarBeam_beam_REQUIRED_BITS_FOR_ENCODING        486
#define asn1SccSonarBeam_beam_REQUIRED_BYTES_FOR_ACN_ENCODING   61 
#define asn1SccSonarBeam_beam_REQUIRED_BITS_FOR_ACN_ENCODING    486
#define asn1SccSonarBeam_beam_REQUIRED_BYTES_FOR_XER_ENCODING   2373

void asn1SccSonarBeam_beam_Initialize(asn1SccSonarBeam_beam* pVal);
flag asn1SccSonarBeam_beam_IsConstraintValid(const asn1SccSonarBeam_beam* val, int* pErrCode);
#ifndef ERR_asn1SccSonarBeam_beam 
#define ERR_asn1SccSonarBeam_beam		1049  /*(SIZE(1 .. maxSonarBeamSize))*/
#endif

typedef struct {
    asn1SccTime ref_time;
    asn1SccAngle bearing;
    asn1SccT_Double sampling_interval;
    asn1SccT_Float speed_of_sound;
    asn1SccT_Float beamwidth_horizontal;
    asn1SccT_Float beamwidth_vertical;
    asn1SccSonarBeam_beam beam;
} asn1SccSonarBeam;

#define asn1SccSonarBeam_REQUIRED_BYTES_FOR_ENCODING       138 
#define asn1SccSonarBeam_REQUIRED_BITS_FOR_ENCODING        1102
#define asn1SccSonarBeam_REQUIRED_BYTES_FOR_ACN_ENCODING   138 
#define asn1SccSonarBeam_REQUIRED_BITS_FOR_ACN_ENCODING    1102
#define asn1SccSonarBeam_REQUIRED_BYTES_FOR_XER_ENCODING   2929

void asn1SccSonarBeam_Initialize(asn1SccSonarBeam* pVal);
flag asn1SccSonarBeam_IsConstraintValid(const asn1SccSonarBeam* val, int* pErrCode);


typedef flag asn1SccT_Boolean;

#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_Boolean_REQUIRED_BITS_FOR_ENCODING        1
#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccT_Boolean_REQUIRED_BITS_FOR_ACN_ENCODING    1
#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_XER_ENCODING   36

void asn1SccT_Boolean_Initialize(asn1SccT_Boolean* pVal);
flag asn1SccT_Boolean_IsConstraintValid(const asn1SccT_Boolean* val, int* pErrCode);


typedef struct {    int nCount; 
    
    byte arr[25];
} asn1SccJoints_names_elm;

#define asn1SccJoints_names_elm_REQUIRED_BYTES_FOR_ENCODING       26 
#define asn1SccJoints_names_elm_REQUIRED_BITS_FOR_ENCODING        205
#define asn1SccJoints_names_elm_REQUIRED_BYTES_FOR_ACN_ENCODING   26 
#define asn1SccJoints_names_elm_REQUIRED_BITS_FOR_ACN_ENCODING    205
#define asn1SccJoints_names_elm_REQUIRED_BYTES_FOR_XER_ENCODING   87

void asn1SccJoints_names_elm_Initialize(asn1SccJoints_names_elm* pVal);
flag asn1SccJoints_names_elm_IsConstraintValid(const asn1SccJoints_names_elm* val, int* pErrCode);
#ifndef ERR_asn1SccJoints_names_elm 
#define ERR_asn1SccJoints_names_elm		1050  /*(SIZE(0 .. jointsNameLength))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccJoints_names_elm arr[30];
} asn1SccJoints_names;

#define asn1SccJoints_names_REQUIRED_BYTES_FOR_ENCODING       770 
#define asn1SccJoints_names_REQUIRED_BITS_FOR_ENCODING        6155
#define asn1SccJoints_names_REQUIRED_BYTES_FOR_ACN_ENCODING   770 
#define asn1SccJoints_names_REQUIRED_BITS_FOR_ACN_ENCODING    6155
#define asn1SccJoints_names_REQUIRED_BYTES_FOR_XER_ENCODING   2399

void asn1SccJoints_names_Initialize(asn1SccJoints_names* pVal);
flag asn1SccJoints_names_IsConstraintValid(const asn1SccJoints_names* val, int* pErrCode);
#ifndef ERR_asn1SccJoints_names 
#define ERR_asn1SccJoints_names		1051  /*(SIZE(0 .. jointsElementsMax))*/
#endif

typedef struct {
    asn1SccTime timestamp;
    asn1SccJoints_names names;
    asn1SccJoints_elements elements;
} asn1SccJoints;

#define asn1SccJoints_REQUIRED_BYTES_FOR_ENCODING       2732 
#define asn1SccJoints_REQUIRED_BITS_FOR_ENCODING        21856
#define asn1SccJoints_REQUIRED_BYTES_FOR_ACN_ENCODING   2732 
#define asn1SccJoints_REQUIRED_BITS_FOR_ACN_ENCODING    21856
#define asn1SccJoints_REQUIRED_BYTES_FOR_XER_ENCODING   13580

void asn1SccJoints_Initialize(asn1SccJoints* pVal);
flag asn1SccJoints_IsConstraintValid(const asn1SccJoints* val, int* pErrCode);


typedef enum {
    asn1Sccunit_x = 0,
    asn1Sccunit_y = 1,
    asn1Sccunit_z = 2
} asn1SccUNIT_AXIS;

#define asn1SccUNIT_AXIS_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccUNIT_AXIS_REQUIRED_BITS_FOR_ENCODING        2
#define asn1SccUNIT_AXIS_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccUNIT_AXIS_REQUIRED_BITS_FOR_ACN_ENCODING    2
#define asn1SccUNIT_AXIS_REQUIRED_BYTES_FOR_XER_ENCODING   38

void asn1SccUNIT_AXIS_Initialize(asn1SccUNIT_AXIS* pVal);
flag asn1SccUNIT_AXIS_IsConstraintValid(const asn1SccUNIT_AXIS* val, int* pErrCode);
#ifndef ERR_asn1SccUNIT_AXIS_unknown_enumeration_value 
#define ERR_asn1SccUNIT_AXIS_unknown_enumeration_value		1053  /**/
#endif
#ifndef ERR_asn1SccUNIT_AXIS 
#define ERR_asn1SccUNIT_AXIS		1052  /**/
#endif

typedef enum {
    asn1Sccvalid_measurement = 0,
    asn1SccDEPTH_MEASUREMENT_STATE_too_far = 1,
    asn1SccDEPTH_MEASUREMENT_STATE_too_near = 2,
    asn1SccDEPTH_MEASUREMENT_STATE_measurement_error = 3
} asn1SccDEPTH_MEASUREMENT_STATE;

#define asn1SccDEPTH_MEASUREMENT_STATE_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccDEPTH_MEASUREMENT_STATE_REQUIRED_BITS_FOR_ENCODING        2
#define asn1SccDEPTH_MEASUREMENT_STATE_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccDEPTH_MEASUREMENT_STATE_REQUIRED_BITS_FOR_ACN_ENCODING    2
#define asn1SccDEPTH_MEASUREMENT_STATE_REQUIRED_BYTES_FOR_XER_ENCODING   88

void asn1SccDEPTH_MEASUREMENT_STATE_Initialize(asn1SccDEPTH_MEASUREMENT_STATE* pVal);
flag asn1SccDEPTH_MEASUREMENT_STATE_IsConstraintValid(const asn1SccDEPTH_MEASUREMENT_STATE* val, int* pErrCode);
#ifndef ERR_asn1SccDEPTH_MEASUREMENT_STATE_unknown_enumeration_value 
#define ERR_asn1SccDEPTH_MEASUREMENT_STATE_unknown_enumeration_value		1055  /**/
#endif
#ifndef ERR_asn1SccDEPTH_MEASUREMENT_STATE 
#define ERR_asn1SccDEPTH_MEASUREMENT_STATE		1054  /**/
#endif

typedef enum {
    asn1Sccpolar = 0,
    asn1Sccplanar = 1
} asn1SccPROJECTION_TYPE;

#define asn1SccPROJECTION_TYPE_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccPROJECTION_TYPE_REQUIRED_BITS_FOR_ENCODING        1
#define asn1SccPROJECTION_TYPE_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccPROJECTION_TYPE_REQUIRED_BITS_FOR_ACN_ENCODING    1
#define asn1SccPROJECTION_TYPE_REQUIRED_BYTES_FOR_XER_ENCODING   48

void asn1SccPROJECTION_TYPE_Initialize(asn1SccPROJECTION_TYPE* pVal);
flag asn1SccPROJECTION_TYPE_IsConstraintValid(const asn1SccPROJECTION_TYPE* val, int* pErrCode);
#ifndef ERR_asn1SccPROJECTION_TYPE_unknown_enumeration_value 
#define ERR_asn1SccPROJECTION_TYPE_unknown_enumeration_value		1057  /**/
#endif
#ifndef ERR_asn1SccPROJECTION_TYPE 
#define ERR_asn1SccPROJECTION_TYPE		1056  /**/
#endif

typedef struct {
    asn1SccTime ref_time;
    asn1SccDepthMap_timestamps timestamps;
    asn1SccPROJECTION_TYPE vertical_projection;
    asn1SccPROJECTION_TYPE horizontal_projection;
    asn1SccDepthMap_vertical_interval vertical_interval;
    asn1SccDepthMap_horizontal_interval horizontal_interval;
    asn1SccT_UInt32 vertical_size;
    asn1SccT_UInt32 horizontal_size;
    asn1SccDepthMap_distances distances;
    asn1SccDepthMap_remissions remissions;
} asn1SccDepthMap;

#define asn1SccDepthMap_REQUIRED_BYTES_FOR_ENCODING       3864 
#define asn1SccDepthMap_REQUIRED_BITS_FOR_ENCODING        30912
#define asn1SccDepthMap_REQUIRED_BYTES_FOR_ACN_ENCODING   3864 
#define asn1SccDepthMap_REQUIRED_BITS_FOR_ACN_ENCODING    30912
#define asn1SccDepthMap_REQUIRED_BYTES_FOR_XER_ENCODING   23733

void asn1SccDepthMap_Initialize(asn1SccDepthMap* pVal);
flag asn1SccDepthMap_IsConstraintValid(const asn1SccDepthMap* val, int* pErrCode);


typedef enum {
    asn1Sccseconds = 0,
    asn1Sccmilliseconds = 1,
    asn1Sccmicroseconds = 2
} asn1SccResolution;

#define asn1SccResolution_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccResolution_REQUIRED_BITS_FOR_ENCODING        2
#define asn1SccResolution_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccResolution_REQUIRED_BITS_FOR_ACN_ENCODING    2
#define asn1SccResolution_REQUIRED_BYTES_FOR_XER_ENCODING   42

void asn1SccResolution_Initialize(asn1SccResolution* pVal);
flag asn1SccResolution_IsConstraintValid(const asn1SccResolution* val, int* pErrCode);
#ifndef ERR_asn1SccResolution_unknown_enumeration_value 
#define ERR_asn1SccResolution_unknown_enumeration_value		1059  /**/
#endif
#ifndef ERR_asn1SccResolution 
#define ERR_asn1SccResolution		1058  /**/
#endif

extern const asn1SccT_UInt32 maxSize_T_String;
extern const asn1SccT_UInt32 maxLaserScanSize;
extern const asn1SccT_UInt32 maxPointcloudSize;
extern const asn1SccT_UInt32 vizkit3dPathMaxSize;
extern const asn1SccT_UInt32 vizkit3dLabelMaxSize;
extern const asn1SccT_UInt32 maxSonarBeamSize;
extern const asn1SccT_UInt32 jointsNameLength;
extern const asn1SccT_UInt32 jointsElementsMax;
extern const asn1SccT_UInt32 maxDepthMapSize; 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

flag asn1SccT_Double_Encode(const asn1SccT_Double* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_Double_Decode(asn1SccT_Double* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccVector6d_Encode(const asn1SccVector6d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccVector6d_Decode(asn1SccVector6d* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccVector3d_Encode(const asn1SccVector3d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccVector3d_Decode(asn1SccVector3d* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPosition_Encode(const asn1SccPosition* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPosition_Decode(asn1SccPosition* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPoint_Encode(const asn1SccPoint* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPoint_Decode(asn1SccPoint* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPointcloud_points_Encode(const asn1SccPointcloud_points* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPointcloud_points_Decode(asn1SccPointcloud_points* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccWaypoint_Encode(const asn1SccWaypoint* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccWaypoint_Decode(asn1SccWaypoint* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccQuaterniond_Encode(const asn1SccQuaterniond* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccQuaterniond_Decode(asn1SccQuaterniond* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccOrientation_Encode(const asn1SccOrientation* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccOrientation_Decode(asn1SccOrientation* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPose_Encode(const asn1SccPose* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPose_Decode(asn1SccPose* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccVectorXd_Encode(const asn1SccVectorXd* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccVectorXd_Decode(asn1SccVectorXd* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccVector2d_Encode(const asn1SccVector2d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccVector2d_Decode(asn1SccVector2d* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPosition2D_Encode(const asn1SccPosition2D* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPosition2D_Decode(asn1SccPosition2D* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPose2D_Encode(const asn1SccPose2D* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPose2D_Decode(asn1SccPose2D* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccVector4d_Encode(const asn1SccVector4d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccVector4d_Decode(asn1SccVector4d* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPointcloud_colors_Encode(const asn1SccPointcloud_colors* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPointcloud_colors_Decode(asn1SccPointcloud_colors* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccAngleAxisd_Encode(const asn1SccAngleAxisd* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccAngleAxisd_Decode(asn1SccAngleAxisd* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccTransform3d_elm_Encode(const asn1SccTransform3d_elm* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccTransform3d_elm_Decode(asn1SccTransform3d_elm* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccTransform3d_Encode(const asn1SccTransform3d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccTransform3d_Decode(asn1SccTransform3d* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMatrix4d_elm_Encode(const asn1SccMatrix4d_elm* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMatrix4d_elm_Decode(asn1SccMatrix4d_elm* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMatrix4d_Encode(const asn1SccMatrix4d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMatrix4d_Decode(asn1SccMatrix4d* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMatrix2d_elm_Encode(const asn1SccMatrix2d_elm* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMatrix2d_elm_Decode(asn1SccMatrix2d_elm* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMatrix2d_Encode(const asn1SccMatrix2d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMatrix2d_Decode(asn1SccMatrix2d* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccIsometry3d_elm_Encode(const asn1SccIsometry3d_elm* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccIsometry3d_elm_Decode(asn1SccIsometry3d_elm* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccIsometry3d_Encode(const asn1SccIsometry3d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccIsometry3d_Decode(asn1SccIsometry3d* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMatrixXd_elm_Encode(const asn1SccMatrixXd_elm* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMatrixXd_elm_Decode(asn1SccMatrixXd_elm* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMatrixXd_Encode(const asn1SccMatrixXd* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMatrixXd_Decode(asn1SccMatrixXd* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMatrix3d_elm_Encode(const asn1SccMatrix3d_elm* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMatrix3d_elm_Decode(asn1SccMatrix3d_elm* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMatrix3d_Encode(const asn1SccMatrix3d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMatrix3d_Decode(asn1SccMatrix3d* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMatrix6d_elm_Encode(const asn1SccMatrix6d_elm* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMatrix6d_elm_Decode(asn1SccMatrix6d_elm* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMatrix6d_Encode(const asn1SccMatrix6d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMatrix6d_Decode(asn1SccMatrix6d* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccCovariance_Encode(const asn1SccCovariance* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccCovariance_Decode(asn1SccCovariance* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccTransformWithCovariance_Encode(const asn1SccTransformWithCovariance* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccTransformWithCovariance_Decode(asn1SccTransformWithCovariance* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccTwistWithCovariance_Encode(const asn1SccTwistWithCovariance* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccTwistWithCovariance_Decode(asn1SccTwistWithCovariance* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccAffine3d_elm_Encode(const asn1SccAffine3d_elm* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccAffine3d_elm_Decode(asn1SccAffine3d_elm* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccAffine3d_Encode(const asn1SccAffine3d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccAffine3d_Decode(asn1SccAffine3d* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPoseUpdateThreshold_Encode(const asn1SccPoseUpdateThreshold* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPoseUpdateThreshold_Decode(asn1SccPoseUpdateThreshold* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccAngle_Encode(const asn1SccAngle* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccAngle_Decode(asn1SccAngle* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccAngleSegment_Encode(const asn1SccAngleSegment* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccAngleSegment_Decode(asn1SccAngleSegment* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMotion2D_Encode(const asn1SccMotion2D* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMotion2D_Decode(asn1SccMotion2D* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccDepthMap_horizontal_interval_Encode(const asn1SccDepthMap_horizontal_interval* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccDepthMap_horizontal_interval_Decode(asn1SccDepthMap_horizontal_interval* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccDepthMap_vertical_interval_Encode(const asn1SccDepthMap_vertical_interval* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccDepthMap_vertical_interval_Decode(asn1SccDepthMap_vertical_interval* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_Float_Encode(const asn1SccT_Float* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_Float_Decode(asn1SccT_Float* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccLaserScan_remission_Encode(const asn1SccLaserScan_remission* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccLaserScan_remission_Decode(asn1SccLaserScan_remission* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccDepthMap_remissions_Encode(const asn1SccDepthMap_remissions* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccDepthMap_remissions_Decode(asn1SccDepthMap_remissions* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccDepthMap_distances_Encode(const asn1SccDepthMap_distances* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccDepthMap_distances_Decode(asn1SccDepthMap_distances* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccJointState_Encode(const asn1SccJointState* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccJointState_Decode(asn1SccJointState* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccJoints_elements_Encode(const asn1SccJoints_elements* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccJoints_elements_Decode(asn1SccJoints_elements* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_Int16_Encode(const asn1SccT_Int16* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_Int16_Decode(asn1SccT_Int16* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_UInt16_Encode(const asn1SccT_UInt16* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_UInt16_Decode(asn1SccT_UInt16* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_UInt64_Encode(const asn1SccT_UInt64* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_UInt64_Decode(asn1SccT_UInt64* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_Int64_Encode(const asn1SccT_Int64* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_Int64_Decode(asn1SccT_Int64* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_String_Encode(const asn1SccT_String* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_String_Decode(asn1SccT_String* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccLASER_RANGE_ERRORS_Encode(const asn1SccLASER_RANGE_ERRORS* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccLASER_RANGE_ERRORS_Decode(asn1SccLASER_RANGE_ERRORS* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccVizkitFilePath_Encode(const asn1SccVizkitFilePath val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccVizkitFilePath_Decode(asn1SccVizkitFilePath pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccVizkitPluginLabel_Encode(const asn1SccVizkitPluginLabel val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccVizkitPluginLabel_Decode(asn1SccVizkitPluginLabel pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_Int32_Encode(const asn1SccT_Int32* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_Int32_Decode(asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccLaserScan_ranges_Encode(const asn1SccLaserScan_ranges* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccLaserScan_ranges_Decode(asn1SccLaserScan_ranges* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccTime_Encode(const asn1SccTime* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccTime_Decode(asn1SccTime* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPointcloud_Encode(const asn1SccPointcloud* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPointcloud_Decode(asn1SccPointcloud* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccDepthMap_timestamps_Encode(const asn1SccDepthMap_timestamps* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccDepthMap_timestamps_Decode(asn1SccDepthMap_timestamps* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccBodyState_Encode(const asn1SccBodyState* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccBodyState_Decode(asn1SccBodyState* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccRigidBodyState_Encode(const asn1SccRigidBodyState* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccRigidBodyState_Decode(asn1SccRigidBodyState* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_UInt32_Encode(const asn1SccT_UInt32* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_UInt32_Decode(asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccLaserScan_Encode(const asn1SccLaserScan* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccLaserScan_Decode(asn1SccLaserScan* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_Int8_Encode(const asn1SccT_Int8* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_Int8_Decode(asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_UInt8_Encode(const asn1SccT_UInt8* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_UInt8_Decode(asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccSonarBeam_beam_Encode(const asn1SccSonarBeam_beam* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccSonarBeam_beam_Decode(asn1SccSonarBeam_beam* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccSonarBeam_Encode(const asn1SccSonarBeam* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccSonarBeam_Decode(asn1SccSonarBeam* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_Boolean_Encode(const asn1SccT_Boolean* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_Boolean_Decode(asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccJoints_names_elm_Encode(const asn1SccJoints_names_elm* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccJoints_names_elm_Decode(asn1SccJoints_names_elm* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccJoints_names_Encode(const asn1SccJoints_names* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccJoints_names_Decode(asn1SccJoints_names* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccJoints_Encode(const asn1SccJoints* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccJoints_Decode(asn1SccJoints* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccUNIT_AXIS_Encode(const asn1SccUNIT_AXIS* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccUNIT_AXIS_Decode(asn1SccUNIT_AXIS* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccDEPTH_MEASUREMENT_STATE_Encode(const asn1SccDEPTH_MEASUREMENT_STATE* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccDEPTH_MEASUREMENT_STATE_Decode(asn1SccDEPTH_MEASUREMENT_STATE* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPROJECTION_TYPE_Encode(const asn1SccPROJECTION_TYPE* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPROJECTION_TYPE_Decode(asn1SccPROJECTION_TYPE* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccDepthMap_Encode(const asn1SccDepthMap* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccDepthMap_Decode(asn1SccDepthMap* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccResolution_Encode(const asn1SccResolution* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccResolution_Decode(asn1SccResolution* pVal, BitStream* pBitStrm, int* pErrCode); 


#ifdef  __cplusplus
}
#define ENUM_asn1SccLASER_RANGE_ERRORS_too_far	asn1SccLASER_RANGE_ERRORS_too_far
#define ENUM_asn1SccLASER_RANGE_ERRORS_too_near	asn1SccLASER_RANGE_ERRORS_too_near
#define ENUM_asn1SccLASER_RANGE_ERRORS_measurement_error	asn1SccLASER_RANGE_ERRORS_measurement_error
#define ENUM_asn1Sccother_range_errors	asn1Sccother_range_errors
#define ENUM_asn1Sccmax_range_error	asn1Sccmax_range_error
#define ENUM_asn1Sccend_laser_range_errors	asn1Sccend_laser_range_errors
#define ENUM_asn1Sccunit_x	asn1Sccunit_x
#define ENUM_asn1Sccunit_y	asn1Sccunit_y
#define ENUM_asn1Sccunit_z	asn1Sccunit_z
#define ENUM_asn1Sccvalid_measurement	asn1Sccvalid_measurement
#define ENUM_asn1SccDEPTH_MEASUREMENT_STATE_too_far	asn1SccDEPTH_MEASUREMENT_STATE_too_far
#define ENUM_asn1SccDEPTH_MEASUREMENT_STATE_too_near	asn1SccDEPTH_MEASUREMENT_STATE_too_near
#define ENUM_asn1SccDEPTH_MEASUREMENT_STATE_measurement_error	asn1SccDEPTH_MEASUREMENT_STATE_measurement_error
#define ENUM_asn1Sccpolar	asn1Sccpolar
#define ENUM_asn1Sccplanar	asn1Sccplanar
#define ENUM_asn1Sccseconds	asn1Sccseconds
#define ENUM_asn1Sccmilliseconds	asn1Sccmilliseconds
#define ENUM_asn1Sccmicroseconds	asn1Sccmicroseconds

#endif

#endif
